<documents created="2013-03-05 19:40:59Z"><document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Library\Specifications\IsSurvivableSpecification.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System.Linq;
using DataAccess.Specification;
using GameOfLife.Contracts;
namespace GameOfLife.Core.Specifications
{
    /// <summary>
    /// Check whether the specific cell is overcrowded or not
    /// Rule for overcrowded is : cell is alive and no of neigbours > 3
    /// </summary>
    public class IsSurvivableSpecification  :ISpecification<ICellInfo>
    {
        private readonly IGrid _grid;
        private readonly INeighbour _neighbour;
        ]]></source>
</chunk>
<method name=".ctor" namespace="GameOfLife.Core.Specifications" type="GameOfLife.Core.Specifications.IsSurvivableSpecification" typeName="IsSurvivableSpecification" token="6000003" module="GameOfLife.Core.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[public IsSurvivableSpecification(IGrid grid)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[_grid = grid;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //This dependency can also be injected with any DI containers for e.g Unity, Autofac or Ninject
            ]]></source>
</chunk>
<chunk hits="2" offset="000f" domain="userortestcode"><source><![CDATA[_neighbour=new NeighboursFinder();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="001a" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Apply business logic
        /// </summary>
        /// <param name="currentCell">Cell for which logic needs to apply</param>
        /// <returns>True if o</returns>
        public bool IsSatisfiedBy(ICellInfo currentCell)
        ]]></source>
</chunk>
<method name="IsSatisfiedBy" namespace="GameOfLife.Core.Specifications" type="GameOfLife.Core.Specifications.IsSurvivableSpecification" typeName="IsSurvivableSpecification" token="6000004" module="GameOfLife.Core.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="16" coveredRatio="0.125"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[if (currentCell == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="000c" domain="userortestcode"><source><![CDATA[return false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //Reterive total neighbours
            ]]></source>
</chunk>
<chunk hits="0" offset="0010" domain="userortestcode"><source><![CDATA[var neighbours = _neighbour.RetrieveNeighbours(currentCell, _grid);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0023" domain="userortestcode"><source><![CDATA[var aliveNeighbours = neighbours.Where(n => n.Alive).ToList();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="004e" domain="userortestcode"><source><![CDATA[return (currentCell.Alive && (aliveNeighbours.Count == 2 || aliveNeighbours.Count==3));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}
]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Library\GameRules.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using GameOfLife.Contracts;
using GameOfLife.Core.Specifications;

namespace GameOfLife.Core
{
    /// <summary>
    /// 
    /// </summary>
    public class GameRules : IGameRules
    {

        public bool WillBeAliveInNextGeneration(IGrid grid, ICellInfo cell)
        {
            if (cell == null) throw new ArgumentNullException("cell");
            if (IsOverCrowded(grid,cell))
            {
                //Any live cell with more than three live neighbours dies, as if by overcrowding.
                return false;
            }                          
            if (IsSurvivable(grid,cell))
            {
                //Any live cell with two or three live neighbours lives on to the next generation.
                return true;
            }
            if (IsUnderPopulated(grid, cell))
            {
                //Any live cell with fewer than two live neighbours dies, as if caused by under-population.
                return false;
            }
            if (IsReproduciable(grid, cell))
            {
                //Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction
                return true;
            }
            return false;
        }

        public bool IsReproduciable(IGrid grid,ICellInfo cell)
        {
            return new IsReproduciableSpecification(grid).IsSatisfiedBy(cell);
        }

        public bool IsUnderPopulated(IGrid grid, ICellInfo cell)
        {
            return new IsUnderPopulatedSpecification(grid).IsSatisfiedBy(cell);
        }

        public bool IsSurvivable(IGrid grid, ICellInfo cell)
        ]]></source>
</chunk>
<method name="IsSurvivable" namespace="GameOfLife.Core" type="GameOfLife.Core.GameRules" typeName="GameRules" token="600001b" module="GameOfLife.Core.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[return new IsSurvivableSpecification(grid).IsSatisfiedBy(cell);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public bool IsOverCrowded(IGrid grid, ICellInfo cell)
        {
            return new IsOverCrowdedSpecification(grid).IsSatisfiedBy(cell);
        }

    }
}]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of GameOfLife.Core, GameOfLife.Core.Tests)" missing="true"><method name=".ctor" type="GameOfLife.Core.NeighboursFinder" token="6000023" module="GameOfLife.Core.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="IsSurvivable" type="GameOfLife.Core.GameRulesTest" token="6000016" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
</document>
</documents>
