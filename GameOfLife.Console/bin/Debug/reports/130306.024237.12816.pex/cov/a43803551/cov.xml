<documents created="2013-03-05 21:13:17Z"><document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Console\Helpers\GameOfLife.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System;
using System.Collections.Generic;
using GameOfLife.Contracts;

namespace GameOfLife.Helpers
{
    public class GameOfLife
    {

        #region Private Fields

        /// <summary>
        /// Size of Grid to work 
        /// </summary>
        private IGridSize _gridSize;
        /// <summary>
        /// Total number of generations
        /// </summary>
        private int _totalGenerations;
        /// <summary>
        /// Variable to store Grid instance
        /// </summary>
        private IGrid _grid;
        /// <summary>
        /// Live cells information for first time from user to start the game
        /// </summary>
        private IEnumerable<ICell> _liveCells;

        private IGameRules _gameRules;
        #endregion

        #region Construtor

        ]]></source>
</chunk>
<method name=".ctor" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.GameOfLife" typeName="GameOfLife" token="6000001" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[public GameOfLife(IGameRules gameRules)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="usercodeundertest"><source><![CDATA[_gameRules = gameRules;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="000f" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

        #region Public Methods

        /// <summary>
        /// Start the Game of Life App
        /// </summary>
        public void Start()
        {
            do
            {
                PrintInstructionsToScreen();

                // Input for gridsize
                while (!TakeGridSizeFromUser())
                {
                    PrintInvalidInputMessage();
                }
                //Input for live cell
                while (!TakeLiveCellsFromUser())
                {
                    PrintInvalidInputMessage();
                }
                while (!TakeGenerationNumbersFromUser())
                {
                    PrintInvalidInputMessage();
                }
                Console.WriteLine("Following grid will be used:");
                //Create Grid
                _grid = GridHelper.CreateGrid(_gridSize, _liveCells);
                //Displaying the grid on UI
                Console.WriteLine(_grid.ToConsoleFormattedString());
                Console.WriteLine("Press Enter key to continue.");
                Console.ReadLine();
                //Start the generations
                StartGenerations();
            } while (GetUserConfirmation());

        }

        #endregion


        #region Private Methods

        private void StartGenerations()
        {
            for (int count = 0; count < _totalGenerations; count++)
            {
                Console.WriteLine("Grid after {0} evolution(s).\nPress enter to continue", count + 1);
                Console.WriteLine(GridHelper.GetNextGenerationGrid(_grid,_gameRules).ToConsoleFormattedString());
                Console.ReadLine();
            }
        }

        private void PrintInvalidInputMessage()
        {
            Console.WriteLine("Invalid input. Please enter again");
        }

        private void PrintInstructionsToScreen()
        {
            Console.WriteLine("---------------------Welcome to The Game Of Life---------------------------\n");
            Console.WriteLine(
                "To start you will have to specify the size of the grid,\nthe initial live cells in the grid and\nthe number of times you want the grid to evolve.\n");
            Console.WriteLine("Specify the Grid Size in the format : RowNumber,ColunmNumber for e.g 5,5 \n");
            Console.WriteLine(
                "Specify the live cells in the format : RowIndex,Colunmindex | RowIndex,Colunmindex for e.g 2,2 | 3,1\n");
            Console.WriteLine("A live cell is represented by X and ");
            Console.WriteLine("A dead cell is represented by - \n");
            Console.WriteLine("Please follow the below messages carefully to execute without any problem.\n");
            Console.WriteLine("--------------------------------------------------------------------------\n");

        }

        /// <summary>
        /// Get the grid size information from user in rownumber,columnnumber format
        /// Populate the gridsize field with parsed information
        /// </summary>
        /// <returns>True or false based on whether procesing is successful or not</returns>
        private bool TakeGridSizeFromUser()
        ]]></source>
</chunk>
<method name="TakeGridSizeFromUser" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.GameOfLife" typeName="GameOfLife" token="6000006" module="GameOfLife.Console.exe"><hits/>
<tags><tag offset="002e">call to uninstrumented method System.String System.ArgumentException.get_Message()</tag>
</tags>
<coverage domain="usercodeundertest" unit="block" covered="0" total="12" coveredRatio="0"/>
</method>
<chunk hits="0" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0001" domain="usercodeundertest"><source><![CDATA[Console.Write("Enter Grid Size in (RowNumber,ColumnNumber) format  followed by Enter key : ");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="usercodeundertest"><source><![CDATA[var userInput = Console.ReadLine();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="usercodeundertest"><source><![CDATA[var result = false;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            try
            ]]></source>
</chunk>
<chunk hits="0" offset="0014" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0015" domain="usercodeundertest"><source><![CDATA[_gridSize = userInput.GetGridSize();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0021" domain="usercodeundertest"><source><![CDATA[result = true;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0023" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0026" domain="usercodeundertest"><source><![CDATA[catch (ArgumentException exception)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0027" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0028" domain="usercodeundertest" tag="true"><tooltip><![CDATA[call to uninstrumented method System.String System.ArgumentException.get_Message()]]></tooltip>
<source><![CDATA[Console.WriteLine("Following error occurred : " + exception.Message);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="003e" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0041" domain="usercodeundertest"><source><![CDATA[catch (Exception exception)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0042" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0043" domain="usercodeundertest"><source><![CDATA[Console.WriteLine("Unknown error occurred : " + exception.Message);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0059" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="005d" domain="usercodeundertest"><source><![CDATA[return result;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0062" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Get the live cells information from user in rownumber,columnnumber | rownumber,columnnumber format
        /// Populate the gridsize field with parsed information
        /// </summary>
        /// <returns>True or false based on whether procesing is successful or not</returns>
        private bool TakeLiveCellsFromUser()
        {
            Console.Write(
                "Enter live cells in the ( rowIndex,colIndex | rowIndex,colIndex ) format followed by Enter key : ");
            var userInput = Console.ReadLine();
            var result = false;
            try
            {
                _liveCells = userInput.ParseLiveCell(_gridSize);
                result = true;
            }
            catch (ArgumentException exception)
            {
                Console.WriteLine("Following error occurred : " + exception.Message);
            }
            catch (Exception exception)
            {
                Console.WriteLine("Unknown error occurred : " + exception.Message);
            }
            return result;
        }

        private bool TakeGenerationNumbersFromUser()
        {
            Console.Write("Enter number of generations followed by Enter key : ");
            var userInput = Console.ReadLine();
            return Int32.TryParse(userInput, out _totalGenerations);
        }

        /// <summary>
        /// Function used to get the info from user whether he/she wants to continue of not
        /// </summary>
        /// <returns></returns>
        private bool GetUserConfirmation()
        {
            Console.WriteLine("Press C followed by the Enter key to continue.");
            var userInput = Console.ReadLine();
            if (userInput != null)
            {
                if (string.Equals(userInput.Trim(), "C", StringComparison.OrdinalIgnoreCase))
                {
                    return true;
                }
                return false;
            }
            return false;
        }

        #endregion

    }
}
]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Console\Helpers\UIHelper.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[using GameOfLife.Contracts;
using GameOfLife.Models;

namespace GameOfLife.Helpers
{
    #region Using Statements

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    #endregion

    public static class UiHelper
    {
        #region Constants

        private const char LiveCell = 'X';
        private const char DeadCell = '-';
        private const char Separator = ' ';
        private const char ColumnSeparator = ',';
        private const char RowSeparator = '|';
        #endregion

        #region Extension Methods

        /// <summary>
        /// Takes individual cells and returns a formatted
        /// string representing the grid.
        /// </summary>
        /// <param name="grid"></param>
        /// <returns></returns>
        public static string ToConsoleFormattedString(this IGrid grid)
        ]]></source>
</chunk>
<method name="ToConsoleFormattedString" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000a" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="33" value="1"/>
<hit index="49" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="20" coveredRatio="0.1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[var builder = new StringBuilder();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            for (]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="usercodeundertest"><source><![CDATA[var rowIndex = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0065" domain="usercodeundertest"><source><![CDATA[rowIndex < grid.GridSize.Rows]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0061" domain="usercodeundertest"><source><![CDATA[rowIndex++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="0" offset="000b" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                for (]]></source>
</chunk>
<chunk hits="0" offset="000c" domain="usercodeundertest"><source><![CDATA[var columnIndex = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="usercodeundertest"><source><![CDATA[columnIndex < grid.GridSize.Columns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="003c" domain="usercodeundertest"><source><![CDATA[columnIndex++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="0010" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0011" domain="usercodeundertest"><source><![CDATA[builder.Append(grid.GetCurrentCellInfo(new Position(rowIndex, columnIndex)).Alive
                                       ? LiveCell
                                       : DeadCell);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0032" domain="usercodeundertest"><source><![CDATA[builder.Append(Separator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="003b" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0054" domain="usercodeundertest"><source><![CDATA[builder.Append(Environment.NewLine);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0060" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="usercodeundertest"><source><![CDATA[return builder.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0082" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Parses a string specifying row and column index of a live 
        /// <see cref="ICell"/> 
        /// The format of the sting is rowIndex,colIndex | rowIndex,colIndex
        /// and returns a <see cref="IGrid{ICell}"/> object containing <paramref name="numberofRows"/>
        /// rows and <paramref name="numberOfcolumns"/>
        /// </summary>
        /// <param name="gridRowColumnString"></param>
        /// <returns></returns>
        public static IGridSize GetGridSize(this string gridRowColumnString)
        ]]></source>
</chunk>
<method name="GetGridSize" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000b" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="20" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="5" total="5" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[gridRowColumnString = gridRowColumnString.Trim(' ', ColumnSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="001b" domain="usercodeundertest"><source><![CDATA[if (gridRowColumnString.Length != 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no alive cells
            ]]></source>
</chunk>
<chunk hits="1" offset="0028" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0029" domain="usercodeundertest"><source><![CDATA[return ParseGridSize(gridRowColumnString);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="1" offset="0032" domain="usercodeundertest"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="0036" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Parses a string specifying row and column index of a live 
        /// <see cref="ICell"/> 
        /// The format of the sting is rowIndex,colIndex | rowIndex,colIndex
        /// and returns a <see cref="IGrid{ICell}"/> object containing <paramref name="numberofRows"/>
        /// rows and <paramref name="numberOfcolumns"/>
        /// </summary>
        /// <param name="gridRowColumnString"></param>
        /// <param name="gridSize"> </param>
        /// <returns></returns>
        public static IEnumerable<ICell> ParseLiveCell(this string gridRowColumnString, IGridSize gridSize)
        ]]></source>
</chunk>
<method name="ParseLiveCell" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000c" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="8" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="20" value="1"/>
<hit index="21" value="1"/>
<hit index="23" value="1"/>
<hit index="24" value="1"/>
<hit index="25" value="1"/>
<hit index="26" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="36" value="1"/>
<hit index="37" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="47" value="1"/>
<hit index="48" value="1"/>
<hit index="51" value="1"/>
<hit index="54" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="17" total="17" coveredRatio="1"/>
</method>
<chunk hits="2" offset="000f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //create a grid and initialize it with dead cells
            //var grid = CreateGrid(numberofRows, numberOfcolumns);

            ]]></source>
</chunk>
<chunk hits="2" offset="0010" domain="usercodeundertest"><source><![CDATA[var liveCells = new List<ICell>();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0016" domain="usercodeundertest"><source><![CDATA[gridRowColumnString = gridRowColumnString.Trim(' ', RowSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0034" domain="usercodeundertest"><source><![CDATA[if (gridRowColumnString.Length != 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no alive cells
            ]]></source>
</chunk>
<chunk hits="1" offset="0043" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0044" domain="usercodeundertest"><source><![CDATA[var rowColumnPairs = gridRowColumnString.Split(RowSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="005b" domain="usercodeundertest"><source><![CDATA[liveCells.AddRange(
                    rowColumnPairs.Select(rowColumnPair => ]]></source>
</chunk>
<method name="&lt;ParseLiveCell&gt;b__0" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper+&lt;&gt;c__DisplayClass4" typeName="UiHelper+&lt;&gt;c__DisplayClass4" token="6000015" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="5" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="2" coveredRatio="0.5"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[ParseCellPosition(rowColumnPair, gridSize)]]></source>
</chunk>
<chunk hits="1" offset="005b" domain="usercodeundertest"><source><![CDATA[).Select(
                        cellPosition => new Cell(cellPosition, true)).Cast<ICell>());]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00a4" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="2" offset="00a5" domain="usercodeundertest"><source><![CDATA[return liveCells;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="2" offset="00aa" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion


        #region Private Methods

        private static IGridSize ParseGridSize(string rowColumnPair)
        ]]></source>
</chunk>
<method name="ParseGridSize" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000d" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="1"/>
<hit index="58" value="1"/>
<hit index="59" value="1"/>
<hit index="63" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="24" total="27" coveredRatio="0.88888888888888884"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[if (!rowColumnPair.Contains(ColumnSeparator))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no valid row,col index pair
            ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} has no rowColumn separator",
                                                          rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="0021" domain="usercodeundertest"><source><![CDATA[var cellIndex = rowColumnPair.Split(ColumnSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="usercodeundertest"><source><![CDATA[if (!cellIndex.Any())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no valid row,col index
            ]]></source>
</chunk>
<chunk hits="0" offset="0044" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0045" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            int rowIndex;
            ]]></source>
</chunk>
<chunk hits="1" offset="0056" domain="usercodeundertest"><source><![CDATA[if (!Int32.TryParse(cellIndex[0], out rowIndex) || rowIndex < 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0072" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0073" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            int colIndex;
            ]]></source>
</chunk>
<chunk hits="1" offset="0084" domain="usercodeundertest"><source><![CDATA[if (!Int32.TryParse(cellIndex[1], out colIndex) || colIndex < 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00a0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="00a1" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="00b2" domain="usercodeundertest"><source><![CDATA[return new GridSize(rowIndex, colIndex);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="00bc" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        private static IPosition ParseCellPosition(string rowColumnPair, IGridSize gridSize)
        ]]></source>
</chunk>
<method name="ParseCellPosition" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000e" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="64" value="1"/>
<hit index="65" value="1"/>
<hit index="66" value="1"/>
<hit index="75" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="14" total="31" coveredRatio="0.45161290322580644"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[if (!rowColumnPair.Contains(ColumnSeparator))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no valid row,col index pair
            ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} has no rowColumn separator",
                                                          rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="0021" domain="usercodeundertest"><source><![CDATA[var cellIndex = rowColumnPair.Split(ColumnSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="usercodeundertest"><source><![CDATA[if (!cellIndex.Any())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no valid row,col index
            ]]></source>
</chunk>
<chunk hits="0" offset="0044" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0045" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            int rowIndex;
            ]]></source>
</chunk>
<chunk hits="1" offset="0056" domain="usercodeundertest"><source><![CDATA[if (!Int32.TryParse(cellIndex[0], out rowIndex) || rowIndex < 0 || rowIndex >= gridSize.Rows)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0078" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0079" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            int colIndex;
            ]]></source>
</chunk>
<chunk hits="0" offset="008a" domain="usercodeundertest"><source><![CDATA[if (!Int32.TryParse(cellIndex[1], out colIndex) || colIndex < 0 || colIndex >= gridSize.Columns)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="00ac" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="00ad" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="0" offset="00be" domain="usercodeundertest"><source><![CDATA[return new Position(rowIndex, colIndex);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="00c8" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        #endregion

    }
}]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Models\GridSize.cs" renderPrefix="s2"><chunk hits="-1" domain="unknown"><source><![CDATA[namespace GameOfLife.Models
{
    #region Using Statements

    using System;
    using Contracts;

    #endregion

    public class GridSize : IGridSize
    {
        public int Rows { get; private set; }

        public int Columns { get; private set; }

        ]]></source>
</chunk>
<method name=".ctor" namespace="GameOfLife.Models" type="GameOfLife.Models.GridSize" typeName="GridSize" token="6000005" module="GameOfLife.Models.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="10" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[public GridSize(int rows, int columns)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[if (rows <= 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="userortestcode"><source><![CDATA[throw new ArgumentOutOfRangeException("rows", "rows value must be > 0");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0020" domain="userortestcode"><source><![CDATA[if (columns <= 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0028" domain="userortestcode"><source><![CDATA[throw new ArgumentOutOfRangeException("columns", "columns value must be > 0");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="userortestcode"><source><![CDATA[Rows = rows;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0040" domain="userortestcode"><source><![CDATA[Columns = columns;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0048" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of GameOfLife.Console.Tests, GameOfLife.Models, GameOfLife.Console)" missing="true"><method name="Constructor" type="GameOfLife.Helpers.GameOfLifeTest" token="6000001" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="GetGridSize" type="GameOfLife.Helpers.UiHelperTest" token="6000004" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="set_Rows" type="GameOfLife.Models.GridSize" token="6000002" module="GameOfLife.Models.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="set_Columns" type="GameOfLife.Models.GridSize" token="6000004" module="GameOfLife.Models.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name=".ctor" type="GameOfLife.Helpers.UiHelper+&lt;&gt;c__DisplayClass4" token="6000014" module="GameOfLife.Console.exe"><hits/>
<coverage domain="usercodeundertest" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="ParseLiveCell" type="GameOfLife.Helpers.UiHelperTest" token="6000005" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="ToConsoleFormattedString" type="GameOfLife.Helpers.UiHelperTest" token="6000006" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="2" coveredRatio="0.5"/>
</method>
</document>
</documents>
