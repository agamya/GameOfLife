<documents created="2013-03-05 21:24:05Z"><document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Console.Tests\UiHelperTest.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[// <copyright file="UiHelperTest.cs">Copyright �  2013</copyright>

using System;
using GameOfLife.Helpers;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Validation;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using GameOfLife.Contracts;
using Microsoft.Pex.Framework.Generated;

namespace GameOfLife.Helpers
{
    [TestClass]
    [PexClass(typeof(UiHelper))]
    [PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes = true)]
    [PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException))]
    public partial class UiHelperTest
    {
        [PexMethod, PexAllowedException(typeof(NullReferenceException))]
        public IGridSize GetGridSize(string gridRowColumnString)
        ]]></source>
</chunk>
<method name="GetGridSize" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelperTest" typeName="UiHelperTest" token="6000001" module="GameOfLife.Console.Tests.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[IGridSize result = UiHelper.GetGridSize(gridRowColumnString);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[return result;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            // TODO: add assertions to method UiHelperTest.GetGridSize(String)
        ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void GetGridSizeThrowsArgumentException917()
        {
            IGridSize iGridSize;
            iGridSize = this.GetGridSize("0,,,,\0");
        }
    }
}
]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Console\Helpers\UIHelper.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[using GameOfLife.Contracts;
using GameOfLife.Models;

namespace GameOfLife.Helpers
{
    #region Using Statements

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    #endregion

    public static class UiHelper
    {
        #region Constants

        private const char LiveCell = 'X';
        private const char DeadCell = '-';
        private const char Separator = ' ';
        private const char ColumnSeparator = ',';
        private const char RowSeparator = '|';
        #endregion

        #region Extension Methods

        /// <summary>
        /// Takes individual cells and returns a formatted
        /// string representing the grid.
        /// </summary>
        /// <param name="grid"></param>
        /// <returns></returns>
        public static string ToConsoleFormattedString(this IGrid grid)
        {
            if (grid == null) return string.Empty;
            var builder = new StringBuilder();
            for (var rowIndex = 0; rowIndex < grid.GridSize.Rows; rowIndex++)
            {
                for (var columnIndex = 0; columnIndex < grid.GridSize.Columns; columnIndex++)
                {
                    builder.Append(grid.GetCurrentCellInfo(new Position(rowIndex, columnIndex)).Alive
                                       ? LiveCell
                                       : DeadCell);
                    builder.Append(Separator);
                }
                builder.Append(Environment.NewLine);
            }

            return builder.ToString();
        }

        /// <summary>
        /// Parses a string specifying row and column index of a live 
        /// <see cref="ICell"/> 
        /// The format of the sting is rowIndex,colIndex | rowIndex,colIndex
        /// and returns a <see cref="IGrid{ICell}"/> object containing <paramref name="numberofRows"/>
        /// rows and <paramref name="numberOfcolumns"/>
        /// </summary>
        /// <param name="gridRowColumnString"></param>
        /// <returns></returns>
        public static IGridSize GetGridSize(this string gridRowColumnString)
        ]]></source>
</chunk>
<method name="GetGridSize" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000b" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="10" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="22" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="7" total="7" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[if (gridRowColumnString == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="000c" domain="usercodeundertest"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="usercodeundertest"><source><![CDATA[gridRowColumnString = gridRowColumnString.Trim(' ', ColumnSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="002a" domain="usercodeundertest"><source><![CDATA[if (gridRowColumnString.Length != 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no alive cells
            ]]></source>
</chunk>
<chunk hits="1" offset="0037" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="usercodeundertest"><source><![CDATA[return ParseGridSize(gridRowColumnString);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="1" offset="0041" domain="usercodeundertest"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="3" offset="0045" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Parses a string specifying row and column index of a live 
        /// <see cref="ICell"/> 
        /// The format of the sting is rowIndex,colIndex | rowIndex,colIndex
        /// and returns a <see cref="IGrid{ICell}"/> object containing <paramref name="numberofRows"/>
        /// rows and <paramref name="numberOfcolumns"/>
        /// </summary>
        /// <param name="gridRowColumnString"></param>
        /// <param name="gridSize"> </param>
        /// <returns></returns>
        public static IEnumerable<ICell> ParseLiveCell(this string gridRowColumnString, IGridSize gridSize)
        {
            //create a grid and initialize it with dead cells
            //var grid = CreateGrid(numberofRows, numberOfcolumns);

            var liveCells = new List<ICell>();
            gridRowColumnString = gridRowColumnString.Trim(' ', RowSeparator);
            if (gridRowColumnString.Length != 0) //no alive cells
            {
                var rowColumnPairs = gridRowColumnString.Split(RowSeparator);
                liveCells.AddRange(
                    rowColumnPairs.Select(rowColumnPair => ParseCellPosition(rowColumnPair, gridSize)).Select(
                        cellPosition => new Cell(cellPosition, true)).Cast<ICell>());
            }

            return liveCells;
        }

        #endregion


        #region Private Methods

        private static IGridSize ParseGridSize(string rowColumnPair)
        ]]></source>
</chunk>
<method name="ParseGridSize" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000d" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
<hit index="6" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
<hit index="27" value="1"/>
<hit index="28" value="1"/>
<hit index="29" value="1"/>
<hit index="30" value="1"/>
<hit index="31" value="1"/>
<hit index="32" value="1"/>
<hit index="33" value="1"/>
<hit index="34" value="1"/>
<hit index="35" value="1"/>
<hit index="37" value="1"/>
<hit index="38" value="1"/>
<hit index="39" value="1"/>
<hit index="40" value="1"/>
<hit index="41" value="1"/>
<hit index="42" value="1"/>
<hit index="43" value="1"/>
<hit index="44" value="1"/>
<hit index="45" value="1"/>
<hit index="46" value="1"/>
<hit index="47" value="1"/>
<hit index="49" value="1"/>
<hit index="50" value="1"/>
<hit index="51" value="1"/>
<hit index="53" value="1"/>
<hit index="54" value="1"/>
<hit index="55" value="1"/>
<hit index="56" value="1"/>
<hit index="57" value="1"/>
<hit index="58" value="1"/>
<hit index="59" value="1"/>
<hit index="63" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="24" total="27" coveredRatio="0.88888888888888884"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[if (!rowColumnPair.Contains(ColumnSeparator))]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no valid row,col index pair
            ]]></source>
</chunk>
<chunk hits="1" offset="000f" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} has no rowColumn separator",
                                                          rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="0021" domain="usercodeundertest"><source><![CDATA[var cellIndex = rowColumnPair.Split(ColumnSeparator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="usercodeundertest"><source><![CDATA[if (!cellIndex.Any())]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ //no valid row,col index
            ]]></source>
</chunk>
<chunk hits="0" offset="0044" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0045" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            int rowIndex;
            ]]></source>
</chunk>
<chunk hits="1" offset="0056" domain="usercodeundertest"><source><![CDATA[if (!Int32.TryParse(cellIndex[0], out rowIndex) || rowIndex < 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0072" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="0073" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            int colIndex;
            ]]></source>
</chunk>
<chunk hits="1" offset="0084" domain="usercodeundertest"><source><![CDATA[if (!Int32.TryParse(cellIndex[1], out colIndex) || colIndex < 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="00a0" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="1" offset="00a1" domain="usercodeundertest"><source><![CDATA[throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }

            ]]></source>
</chunk>
<chunk hits="1" offset="00b2" domain="usercodeundertest"><source><![CDATA[return new GridSize(rowIndex, colIndex);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="00bc" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        private static IPosition ParseCellPosition(string rowColumnPair, IGridSize gridSize)
        {
            if (!rowColumnPair.Contains(ColumnSeparator)) //no valid row,col index pair
            {
                throw new ArgumentException(string.Format("The row column pair {0} has no rowColumn separator",
                                                          rowColumnPair));
            }

            var cellIndex = rowColumnPair.Split(ColumnSeparator);
            if (!cellIndex.Any()) //no valid row,col index
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            int rowIndex;
            if (!Int32.TryParse(cellIndex[0], out rowIndex) || rowIndex < 0 || rowIndex >= gridSize.Rows)
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            int colIndex;
            if (!Int32.TryParse(cellIndex[1], out colIndex) || colIndex < 0 || colIndex >= gridSize.Columns)
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            return new Position(rowIndex, colIndex);
        }

        #endregion

    }
}]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Models\GridSize.cs" renderPrefix="s2"><chunk hits="-1" domain="unknown"><source><![CDATA[namespace GameOfLife.Models
{
    #region Using Statements

    using System;
    using Contracts;

    #endregion

    public class GridSize : IGridSize
    {
        public int Rows { get; private set; }

        public int Columns { get; private set; }

        ]]></source>
</chunk>
<method name=".ctor" namespace="GameOfLife.Models" type="GameOfLife.Models.GridSize" typeName="GridSize" token="6000005" module="GameOfLife.Models.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="8" value="1"/>
<hit index="9" value="1"/>
<hit index="11" value="1"/>
<hit index="12" value="1"/>
<hit index="13" value="1"/>
<hit index="14" value="1"/>
<hit index="15" value="1"/>
<hit index="16" value="1"/>
<hit index="17" value="1"/>
<hit index="18" value="1"/>
<hit index="19" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="10" total="10" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[public GridSize(int rows, int columns)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[if (rows <= 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="userortestcode"><source><![CDATA[throw new ArgumentOutOfRangeException("rows", "rows value must be > 0");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0020" domain="userortestcode"><source><![CDATA[if (columns <= 0)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0028" domain="userortestcode"><source><![CDATA[throw new ArgumentOutOfRangeException("columns", "columns value must be > 0");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0038" domain="userortestcode"><source><![CDATA[Rows = rows;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0040" domain="userortestcode"><source><![CDATA[Columns = columns;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0048" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of System.Core, GameOfLife.Models)" missing="true"><method name="Contains" type="System.Linq.Enumerable" token="6000458" module="System.Core.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="3" total="5" coveredRatio="0.6"/>
</method>
<method name="Contains" type="System.Linq.Enumerable" token="6000459" module="System.Core.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="15" total="17" coveredRatio="0.88235294117647056"/>
</method>
<method name="Any" type="System.Linq.Enumerable" token="6000451" module="System.Core.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="7" total="10" coveredRatio="0.7"/>
</method>
<method name="set_Rows" type="GameOfLife.Models.GridSize" token="6000002" module="GameOfLife.Models.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
<method name="set_Columns" type="GameOfLife.Models.GridSize" token="6000004" module="GameOfLife.Models.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="1" coveredRatio="1"/>
</method>
</document>
</documents>
