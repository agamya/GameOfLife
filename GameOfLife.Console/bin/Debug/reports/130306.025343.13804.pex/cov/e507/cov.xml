<documents created="2013-03-05 21:24:24Z"><document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Console\Helpers\UIHelper.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using GameOfLife.Contracts;
using GameOfLife.Models;

namespace GameOfLife.Helpers
{
    #region Using Statements

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    #endregion

    public static class UiHelper
    {
        #region Constants

        private const char LiveCell = 'X';
        private const char DeadCell = '-';
        private const char Separator = ' ';
        private const char ColumnSeparator = ',';
        private const char RowSeparator = '|';
        #endregion

        #region Extension Methods

        /// <summary>
        /// Takes individual cells and returns a formatted
        /// string representing the grid.
        /// </summary>
        /// <param name="grid"></param>
        /// <returns></returns>
        public static string ToConsoleFormattedString(this IGrid grid)
        ]]></source>
</chunk>
<method name="ToConsoleFormattedString" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.UiHelper" typeName="UiHelper" token="600000a" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="2" total="22" coveredRatio="0.090909090909090912"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[if (grid == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="000e" domain="usercodeundertest"><source><![CDATA[return string.Empty;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0019" domain="usercodeundertest"><source><![CDATA[var builder = new StringBuilder();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            for (]]></source>
</chunk>
<chunk hits="0" offset="001f" domain="usercodeundertest"><source><![CDATA[var rowIndex = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="007d" domain="usercodeundertest"><source><![CDATA[rowIndex < grid.GridSize.Rows]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0079" domain="usercodeundertest"><source><![CDATA[rowIndex++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="0" offset="0023" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                for (]]></source>
</chunk>
<chunk hits="0" offset="0024" domain="usercodeundertest"><source><![CDATA[var columnIndex = 0;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0058" domain="usercodeundertest"><source><![CDATA[columnIndex < grid.GridSize.Columns]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[; ]]></source>
</chunk>
<chunk hits="0" offset="0054" domain="usercodeundertest"><source><![CDATA[columnIndex++]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="0028" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0029" domain="usercodeundertest"><source><![CDATA[builder.Append(grid.GetCurrentCellInfo(new Position(rowIndex, columnIndex)).Alive
                                       ? LiveCell
                                       : DeadCell);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="004a" domain="usercodeundertest"><source><![CDATA[builder.Append(Separator);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0053" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="006c" domain="usercodeundertest"><source><![CDATA[builder.Append(Environment.NewLine);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0078" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="0091" domain="usercodeundertest"><source><![CDATA[return builder.ToString();]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="009a" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        /// <summary>
        /// Parses a string specifying row and column index of a live 
        /// <see cref="ICell"/> 
        /// The format of the sting is rowIndex,colIndex | rowIndex,colIndex
        /// and returns a <see cref="IGrid{ICell}"/> object containing <paramref name="numberofRows"/>
        /// rows and <paramref name="numberOfcolumns"/>
        /// </summary>
        /// <param name="gridRowColumnString"></param>
        /// <returns></returns>
        public static IGridSize GetGridSize(this string gridRowColumnString)
        {
            if (gridRowColumnString == null) return null;
            gridRowColumnString = gridRowColumnString.Trim(' ', ColumnSeparator);
            if (gridRowColumnString.Length != 0) //no alive cells
            {
                return ParseGridSize(gridRowColumnString);
            }
            return null;
        }

        /// <summary>
        /// Parses a string specifying row and column index of a live 
        /// <see cref="ICell"/> 
        /// The format of the sting is rowIndex,colIndex | rowIndex,colIndex
        /// and returns a <see cref="IGrid{ICell}"/> object containing <paramref name="numberofRows"/>
        /// rows and <paramref name="numberOfcolumns"/>
        /// </summary>
        /// <param name="gridRowColumnString"></param>
        /// <param name="gridSize"> </param>
        /// <returns></returns>
        public static IEnumerable<ICell> ParseLiveCell(this string gridRowColumnString, IGridSize gridSize)
        {
            //create a grid and initialize it with dead cells
            //var grid = CreateGrid(numberofRows, numberOfcolumns);

            var liveCells = new List<ICell>();
            gridRowColumnString = gridRowColumnString.Trim(' ', RowSeparator);
            if (gridRowColumnString.Length != 0) //no alive cells
            {
                var rowColumnPairs = gridRowColumnString.Split(RowSeparator);
                liveCells.AddRange(
                    rowColumnPairs.Select(rowColumnPair => ParseCellPosition(rowColumnPair, gridSize)).Select(
                        cellPosition => new Cell(cellPosition, true)).Cast<ICell>());
            }

            return liveCells;
        }

        #endregion


        #region Private Methods

        private static IGridSize ParseGridSize(string rowColumnPair)
        {
            if (!rowColumnPair.Contains(ColumnSeparator)) //no valid row,col index pair
            {
                throw new ArgumentException(string.Format("The row column pair {0} has no rowColumn separator",
                                                          rowColumnPair));
            }

            var cellIndex = rowColumnPair.Split(ColumnSeparator);
            if (!cellIndex.Any()) //no valid row,col index
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            int rowIndex;
            if (!Int32.TryParse(cellIndex[0], out rowIndex) || rowIndex < 0)
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            int colIndex;
            if (!Int32.TryParse(cellIndex[1], out colIndex) || colIndex < 0)
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            return new GridSize(rowIndex, colIndex);
        }

        private static IPosition ParseCellPosition(string rowColumnPair, IGridSize gridSize)
        {
            if (!rowColumnPair.Contains(ColumnSeparator)) //no valid row,col index pair
            {
                throw new ArgumentException(string.Format("The row column pair {0} has no rowColumn separator",
                                                          rowColumnPair));
            }

            var cellIndex = rowColumnPair.Split(ColumnSeparator);
            if (!cellIndex.Any()) //no valid row,col index
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            int rowIndex;
            if (!Int32.TryParse(cellIndex[0], out rowIndex) || rowIndex < 0 || rowIndex >= gridSize.Rows)
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            int colIndex;
            if (!Int32.TryParse(cellIndex[1], out colIndex) || colIndex < 0 || colIndex >= gridSize.Columns)
            {
                throw new ArgumentException(string.Format("The row column pair {0} is not valid", rowColumnPair));
            }

            return new Position(rowIndex, colIndex);
        }

        #endregion

    }
}]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of GameOfLife.Console.Tests)" missing="true"><method name="ToConsoleFormattedString" type="GameOfLife.Helpers.UiHelperTest" token="6000005" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
</document>
</documents>
