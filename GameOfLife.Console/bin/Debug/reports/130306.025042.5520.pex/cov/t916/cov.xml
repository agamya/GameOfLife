<documents created="2013-03-05 21:21:03Z"><document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Console\Helpers\GridHelper.cs" renderPrefix="s0"><chunk hits="-1" domain="unknown"><source><![CDATA[using System.Collections.Generic;
using GameOfLife.Contracts;
using GameOfLife.Core;

namespace GameOfLife.Helpers
{
    static class GridHelper
    {
        public static IGrid CreateGrid(IGridSize gridSize,IEnumerable<ICell> liveCells)
        ]]></source>
</chunk>
<method name="CreateGrid" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.GridHelper" typeName="GridHelper" token="6000010" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="42" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="1" total="13" coveredRatio="0.076923076923076927"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[var grid = new Grid(gridSize);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            //Mark all cells
            ]]></source>
</chunk>
<chunk hits="0" offset="0008" domain="usercodeundertest"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0012" domain="usercodeundertest"><source><![CDATA[var liveCell]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="002e" domain="usercodeundertest"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0009" domain="usercodeundertest"><source><![CDATA[liveCells]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
            ]]></source>
</chunk>
<chunk hits="0" offset="0019" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                 ]]></source>
</chunk>
<chunk hits="0" offset="001a" domain="usercodeundertest"><source><![CDATA[grid.MakeCell(liveCell.Position,liveCell.Alive);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="002d" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="0" offset="004f" domain="usercodeundertest"><source><![CDATA[return grid;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0053" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

        public static IGrid GetNextGenerationGrid(IGrid currentGrid,IGameRules gameRules)
        ]]></source>
</chunk>
<method name="GetNextGenerationGrid" namespace="GameOfLife.Helpers" type="GameOfLife.Helpers.GridHelper" typeName="GridHelper" token="6000011" module="GameOfLife.Console.exe"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="5" value="1"/>
</hits>
<coverage domain="usercodeundertest" unit="block" covered="3" total="3" coveredRatio="1"/>
</method>
<chunk hits="1" offset="0000" domain="usercodeundertest"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="usercodeundertest"><source><![CDATA[return new Generation().GetNextGeneration(currentGrid, gameRules);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0010" domain="usercodeundertest"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

    }
}
]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Library\Grid.cs" renderPrefix="s1"><chunk hits="-1" domain="unknown"><source><![CDATA[namespace GameOfLife.Core
{
    #region Using Statements

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Contracts;
    using Data;
    using Models;

    #endregion

    /// <summary>
    ///  the grid is a "board" with an extra row on top & bottom and an extra column left & right (with dead cells)
    ///  takes care of the position transformations
    /// </summary>
    public class Grid : IGrid
    {
        private readonly IGridStorage _gridStorage;

        ]]></source>
</chunk>
<method name=".ctor" namespace="GameOfLife.Core" type="GameOfLife.Core.Grid" typeName="Grid" token="600000c" module="GameOfLife.Core.dll"><hits><hit index="0" value="1"/>
<hit index="1" value="1"/>
<hit index="2" value="1"/>
<hit index="3" value="1"/>
<hit index="4" value="1"/>
<hit index="6" value="1"/>
<hit index="7" value="1"/>
<hit index="17" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="4" total="7" coveredRatio="0.5714285714285714"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[public Grid(IGridSize gridSize)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0007" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="1" offset="0008" domain="userortestcode"><source><![CDATA[if (gridSize == null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="1" offset="0013" domain="userortestcode"><source><![CDATA[throw new ArgumentNullException("gridSize");]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="001e" domain="userortestcode"><source><![CDATA[GridSize = gridSize;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="0026" domain="userortestcode"><source><![CDATA[_gridStorage = new GridStorage(gridSize);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="0" offset="0032" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[


        public ICell GetCurrentCellInfo(IPosition position)
        {
            if (position == null) throw new ArgumentNullException("position");
            if (!IsValidPosition(position)) throw new ArgumentOutOfRangeException("position");
            var gridPosition = CreateGridPositionFrom(position);
            var isCellAlive = _gridStorage.IsCellAlive(gridPosition);
            var newCell = new Cell(position, isCellAlive);
            return newCell;
        }

        public IEnumerable<ICell> GetAllCurrentCellInfo()
        {
            for (int i = 0; i < GridSize.Rows; i++)
            {
                for (int j = 0; j < GridSize.Columns; j++)
                {
                    yield return GetCurrentCellInfo(new Position(i, j));
                }
            }
        }

        //public IEnumerable<ICell> GetAllNextGenerationCellInfo()
        //{
        //    for (int i = 0; i < GridSize.Rows; i++)
        //    {
        //        for (int j = 0; j < GridSize.Columns; j++)
        //        {
        //            yield return CreateNextGenerationCellInfo(new Position(i, j));
        //        }
        //    }
        //}

        public void MakeCell(IPosition position, bool alive)
        {
            if (position == null) throw new ArgumentNullException("position");
            if (!IsValidPosition(position)) throw new ArgumentOutOfRangeException("position");
            var gridPosition = CreateGridPositionFrom(position);
            _gridStorage.SetCell(gridPosition, alive);
        }
        public void MakeCell(ICell cell)
        {
            MakeCell(cell.Position, cell.Alive);
        }

        /// <summary>
        /// Create new instance of current grid
        /// </summary>
        /// <param name="currentGrid">Current grid</param>
        /// <returns>Retunr new grid instance</returns>
        public IGrid Copy(IGrid currentGrid)
        {
            var gridCopy = new Grid(currentGrid.GridSize);
            foreach (var newCell in currentGrid.GetAllCurrentCellInfo().Select(cell => new Cell(cell.Position, cell.Alive)))
            {
                gridCopy.MakeCell(newCell);
            }

            return gridCopy;
        }

        //private static IGridSize CreateGridSizeFrom(IBoardSize boardSize)
        //{
        //    return new GridSize(boardSize.Rows, boardSize.Columns);
        //}

        //private static IGridSize CreateGridSizeFrom(IGridSize gridSize)
        //{
        //    return new GridSize(gridSize.Rows, gridSize.Columns);
        //}


        #region Private Members

        //private ICell CreateNextGenerationCellInfo(IPosition position)
        //{
        //    var gridPosition = CreateGridPositionFrom(position);
        //    var currentExtendedGridCellInfo = _gridStorage.CreateExtendedGridCellInfo(gridPosition);
        //    var aliveNextGeneration = _gameRules.WillBeAliveNextGeneration(currentExtendedGridCellInfo);
        //    return new Cell(position, aliveNextGeneration);
        //}

        private IGridPosition CreateGridPositionFrom(IPosition position)
        {
            return new GridPosition(position);
        }

        private bool IsValidPosition(IPosition position)
        {
            return (position.Column < GridSize.Columns && position.Row < GridSize.Rows);
        }

        //private void MakeCell(ICell cellInfo)
        //{
        //    MakeCell(cellInfo.Position, cellInfo.Alive);
        //}

        #endregion


        public void Initialize(IEnumerable<ICell> cells)
        {
            if (cells == null) return;
            foreach (var cell in cells)
            {
                MakeCell(cell.Position, cell.Alive);
            }
        }

        public IGridSize GridSize { get; set; }

        //public IGrid CreateNextGeneration()
        //{
        //    throw new NotImplementedException();
        //}


    }
}]]></source>
</chunk>
</document>
<document src="F:\Ajay\Test Projects\GameOfLife\GameOfLife.Library\Generation.cs" renderPrefix="s2"><chunk hits="-1" domain="unknown"><source><![CDATA[namespace GameOfLife.Core
{
    #region Using Statements

    using Contracts;

    #endregion

    /// <summary>
    /// Implement Game of life generation (simualtion) algorithms                                                                                      
    /// </summary>
    public class Generation : IGeneration
    {
        /// <summary>
        /// By applying game rules get the next genertion grid instance
        /// </summary>
        /// <param name="currentGrid">Grid on which games rules</param>
        /// <param name="gameRules"> </param>
        /// <returns>Evolved grid instance</returns>
        public IGrid GetNextGeneration(IGrid currentGrid,IGameRules gameRules)
        ]]></source>
</chunk>
<method name="GetNextGeneration" namespace="GameOfLife.Core" type="GameOfLife.Core.Generation" typeName="Generation" token="6000001" module="GameOfLife.Core.dll"><hits><hit index="0" value="1"/>
<hit index="48" value="1"/>
<hit index="49" value="1"/>
</hits>
<coverage domain="userortestcode" unit="block" covered="3" total="18" coveredRatio="0.16666666666666666"/>
</method>
<chunk hits="1" offset="0000" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[

            ]]></source>
</chunk>
<chunk hits="1" offset="0001" domain="userortestcode"><source><![CDATA[if (currentGrid!=null && gameRules!=null)]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            ]]></source>
</chunk>
<chunk hits="0" offset="000f" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0010" domain="userortestcode"><source><![CDATA[var gridCopy = currentGrid.Copy(currentGrid);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0018" domain="userortestcode"><source><![CDATA[foreach]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ (]]></source>
</chunk>
<chunk hits="0" offset="0028" domain="userortestcode"><source><![CDATA[var cell]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0049" domain="userortestcode"><source><![CDATA[in]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[ ]]></source>
</chunk>
<chunk hits="0" offset="0019" domain="userortestcode"><source><![CDATA[currentGrid.GetAllCurrentCellInfo()]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[)
                ]]></source>
</chunk>
<chunk hits="0" offset="0030" domain="userortestcode"><source><![CDATA[{]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0031" domain="userortestcode"><source><![CDATA[cell.Alive = gameRules.WillBeAliveInNextGeneration(gridCopy, cell);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                    ]]></source>
</chunk>
<chunk hits="0" offset="0040" domain="userortestcode"><source><![CDATA[gridCopy.MakeCell(cell);]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0048" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
                ]]></source>
</chunk>
<chunk hits="0" offset="0069" domain="userortestcode"><source><![CDATA[return gridCopy;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
            }
            ]]></source>
</chunk>
<chunk hits="1" offset="006d" domain="userortestcode"><source><![CDATA[return null;]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
        ]]></source>
</chunk>
<chunk hits="1" offset="0071" domain="userortestcode"><source><![CDATA[}]]></source>
</chunk>
<chunk hits="-1" domain="unknown"><source><![CDATA[
    }
}
]]></source>
</chunk>
</document>
<document src="(no sources available for some parts of GameOfLife.Console.Tests, GameOfLife.Core)" missing="true"><method name="CreateGrid" type="GameOfLife.Helpers.GridHelperTest" token="6000007" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="1" total="2" coveredRatio="0.5"/>
</method>
<method name=".ctor" type="GameOfLife.Core.Generation" token="6000002" module="GameOfLife.Core.dll"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
<method name="GetNextGenerationGrid" type="GameOfLife.Helpers.GridHelperTest" token="6000008" module="&lt;In Memory Module&gt;"><hits/>
<coverage domain="userortestcode" unit="block" covered="2" total="2" coveredRatio="1"/>
</method>
</document>
</documents>
